{"ast":null,"code":"// Mock data for initial setup\nconst initialData = {\n  users: [{\n    id: '1',\n    email: 'admin@example.com',\n    password: 'password123',\n    // In a real app, this would be hashed\n    name: 'Admin User',\n    role: 'admin',\n    assignedClients: ['1', '2', '3']\n  }, {\n    id: '2',\n    email: 'agent@example.com',\n    password: 'password123',\n    name: 'Call Center Agent',\n    role: 'agent',\n    assignedClients: ['1', '2']\n  }, {\n    id: '3',\n    email: 'nurse@example.com',\n    password: 'password123',\n    name: 'Nurse User',\n    role: 'nurse',\n    assignedClients: ['1', '2', '3']\n  }, {\n    id: '4',\n    email: 'client@example.com',\n    password: 'password123',\n    name: 'Client User',\n    role: 'client',\n    assignedClients: ['1']\n  }],\n  clients: [{\n    id: '1',\n    name: 'Hospice Care A',\n    timezone: 'America/New_York',\n    active: true\n  }, {\n    id: '2',\n    name: 'Hospice Care B',\n    timezone: 'America/Chicago',\n    active: true\n  }, {\n    id: '3',\n    name: 'Hospice Care C',\n    timezone: 'America/Los_Angeles',\n    active: true\n  }],\n  calls: [{\n    id: '1',\n    clientId: '1',\n    userId: '2',\n    patientId: 'PT001',\n    callType: 'inbound',\n    summary: 'Patient reported severe pain',\n    categories: ['Pain'],\n    timestamp: new Date().toISOString()\n  }, {\n    id: '2',\n    clientId: '2',\n    userId: '2',\n    patientId: 'PT002',\n    callType: 'outbound',\n    summary: 'Follow-up on medication refill',\n    categories: ['Refill'],\n    timestamp: new Date().toISOString()\n  }],\n  categories: [{\n    id: '1',\n    label: 'Pain'\n  }, {\n    id: '2',\n    label: 'Refill'\n  }, {\n    id: '3',\n    label: 'Constipation'\n  }, {\n    id: '4',\n    label: 'Anxiety'\n  }]\n};\n\n// Initialize localStorage with mock data if empty\nconst initializeLocalStorage = () => {\n  if (!localStorage.getItem('users')) {\n    localStorage.setItem('users', JSON.stringify(initialData.users));\n  }\n  if (!localStorage.getItem('clients')) {\n    localStorage.setItem('clients', JSON.stringify(initialData.clients));\n  }\n  if (!localStorage.getItem('calls')) {\n    localStorage.setItem('calls', JSON.stringify(initialData.calls));\n  }\n  if (!localStorage.getItem('categories')) {\n    localStorage.setItem('categories', JSON.stringify(initialData.categories));\n  }\n};\n\n// Auth service\nexport const authService = {\n  login: (email, password) => {\n    const users = JSON.parse(localStorage.getItem('users'));\n    const user = users.find(u => u.email === email && u.password === password);\n    if (user) {\n      const {\n        password,\n        ...userWithoutPassword\n      } = user;\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return userWithoutPassword;\n    }\n    throw new Error('Invalid credentials');\n  },\n  logout: () => {\n    localStorage.removeItem('currentUser');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('currentUser');\n    return user ? JSON.parse(user) : null;\n  }\n};\n\n// Call service\nexport const callService = {\n  getCalls: () => {\n    return JSON.parse(localStorage.getItem('calls'));\n  },\n  addCall: call => {\n    const calls = JSON.parse(localStorage.getItem('calls'));\n    const newCall = {\n      ...call,\n      id: Date.now().toString(),\n      timestamp: new Date().toISOString()\n    };\n    calls.push(newCall);\n    localStorage.setItem('calls', JSON.stringify(calls));\n    return newCall;\n  }\n};\n\n// Client service\nexport const clientService = {\n  getClients: () => {\n    return JSON.parse(localStorage.getItem('clients'));\n  }\n};\n\n// Category service\nexport const categoryService = {\n  getCategories: () => {\n    return JSON.parse(localStorage.getItem('categories'));\n  }\n};\n\n// User service\nexport const userService = {\n  getUsers: () => {\n    const users = JSON.parse(localStorage.getItem('users'));\n    return users.map(({\n      password,\n      ...user\n    }) => user);\n  },\n  addUser: user => {\n    const users = JSON.parse(localStorage.getItem('users'));\n    const newUser = {\n      ...user,\n      id: Date.now().toString()\n    };\n    users.push(newUser);\n    localStorage.setItem('users', JSON.stringify(users));\n    return newUser;\n  },\n  deleteUser: userId => {\n    const users = JSON.parse(localStorage.getItem('users'));\n    const filteredUsers = users.filter(user => user.id !== userId);\n    localStorage.setItem('users', JSON.stringify(filteredUsers));\n  }\n};\n\n// Initialize the storage\ninitializeLocalStorage();\nconst services = {\n  authService,\n  callService,\n  clientService,\n  categoryService,\n  userService\n};\nexport default services;","map":{"version":3,"names":["initialData","users","id","email","password","name","role","assignedClients","clients","timezone","active","calls","clientId","userId","patientId","callType","summary","categories","timestamp","Date","toISOString","label","initializeLocalStorage","localStorage","getItem","setItem","JSON","stringify","authService","login","parse","user","find","u","userWithoutPassword","Error","logout","removeItem","getCurrentUser","callService","getCalls","addCall","call","newCall","now","toString","push","clientService","getClients","categoryService","getCategories","userService","getUsers","map","addUser","newUser","deleteUser","filteredUsers","filter","services"],"sources":["C:/Users/Robert/Desktop/hippaa app/src/services/localStorage.js"],"sourcesContent":["// Mock data for initial setup\r\nconst initialData = {\r\n  users: [\r\n    {\r\n      id: '1',\r\n      email: 'admin@example.com',\r\n      password: 'password123', // In a real app, this would be hashed\r\n      name: 'Admin User',\r\n      role: 'admin',\r\n      assignedClients: ['1', '2', '3']\r\n    },\r\n    {\r\n      id: '2',\r\n      email: 'agent@example.com',\r\n      password: 'password123',\r\n      name: 'Call Center Agent',\r\n      role: 'agent',\r\n      assignedClients: ['1', '2']\r\n    },\r\n    {\r\n      id: '3',\r\n      email: 'nurse@example.com',\r\n      password: 'password123',\r\n      name: 'Nurse User',\r\n      role: 'nurse',\r\n      assignedClients: ['1', '2', '3']\r\n    },\r\n    {\r\n      id: '4',\r\n      email: 'client@example.com',\r\n      password: 'password123',\r\n      name: 'Client User',\r\n      role: 'client',\r\n      assignedClients: ['1']\r\n    }\r\n  ],\r\n  clients: [\r\n    {\r\n      id: '1',\r\n      name: 'Hospice Care A',\r\n      timezone: 'America/New_York',\r\n      active: true\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Hospice Care B',\r\n      timezone: 'America/Chicago',\r\n      active: true\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Hospice Care C',\r\n      timezone: 'America/Los_Angeles',\r\n      active: true\r\n    }\r\n  ],\r\n  calls: [\r\n    {\r\n      id: '1',\r\n      clientId: '1',\r\n      userId: '2',\r\n      patientId: 'PT001',\r\n      callType: 'inbound',\r\n      summary: 'Patient reported severe pain',\r\n      categories: ['Pain'],\r\n      timestamp: new Date().toISOString()\r\n    },\r\n    {\r\n      id: '2',\r\n      clientId: '2',\r\n      userId: '2',\r\n      patientId: 'PT002',\r\n      callType: 'outbound',\r\n      summary: 'Follow-up on medication refill',\r\n      categories: ['Refill'],\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  ],\r\n  categories: [\r\n    { id: '1', label: 'Pain' },\r\n    { id: '2', label: 'Refill' },\r\n    { id: '3', label: 'Constipation' },\r\n    { id: '4', label: 'Anxiety' }\r\n  ]\r\n};\r\n\r\n// Initialize localStorage with mock data if empty\r\nconst initializeLocalStorage = () => {\r\n  if (!localStorage.getItem('users')) {\r\n    localStorage.setItem('users', JSON.stringify(initialData.users));\r\n  }\r\n  if (!localStorage.getItem('clients')) {\r\n    localStorage.setItem('clients', JSON.stringify(initialData.clients));\r\n  }\r\n  if (!localStorage.getItem('calls')) {\r\n    localStorage.setItem('calls', JSON.stringify(initialData.calls));\r\n  }\r\n  if (!localStorage.getItem('categories')) {\r\n    localStorage.setItem('categories', JSON.stringify(initialData.categories));\r\n  }\r\n};\r\n\r\n// Auth service\r\nexport const authService = {\r\n  login: (email, password) => {\r\n    const users = JSON.parse(localStorage.getItem('users'));\r\n    const user = users.find(u => u.email === email && u.password === password);\r\n    if (user) {\r\n      const { password, ...userWithoutPassword } = user;\r\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n      return userWithoutPassword;\r\n    }\r\n    throw new Error('Invalid credentials');\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('currentUser');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('currentUser');\r\n    return user ? JSON.parse(user) : null;\r\n  }\r\n};\r\n\r\n// Call service\r\nexport const callService = {\r\n  getCalls: () => {\r\n    return JSON.parse(localStorage.getItem('calls'));\r\n  },\r\n\r\n  addCall: (call) => {\r\n    const calls = JSON.parse(localStorage.getItem('calls'));\r\n    const newCall = {\r\n      ...call,\r\n      id: Date.now().toString(),\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    calls.push(newCall);\r\n    localStorage.setItem('calls', JSON.stringify(calls));\r\n    return newCall;\r\n  }\r\n};\r\n\r\n// Client service\r\nexport const clientService = {\r\n  getClients: () => {\r\n    return JSON.parse(localStorage.getItem('clients'));\r\n  }\r\n};\r\n\r\n// Category service\r\nexport const categoryService = {\r\n  getCategories: () => {\r\n    return JSON.parse(localStorage.getItem('categories'));\r\n  }\r\n};\r\n\r\n// User service\r\nexport const userService = {\r\n  getUsers: () => {\r\n    const users = JSON.parse(localStorage.getItem('users'));\r\n    return users.map(({ password, ...user }) => user);\r\n  },\r\n\r\n  addUser: (user) => {\r\n    const users = JSON.parse(localStorage.getItem('users'));\r\n    const newUser = {\r\n      ...user,\r\n      id: Date.now().toString()\r\n    };\r\n    users.push(newUser);\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n    return newUser;\r\n  },\r\n\r\n  deleteUser: (userId) => {\r\n    const users = JSON.parse(localStorage.getItem('users'));\r\n    const filteredUsers = users.filter(user => user.id !== userId);\r\n    localStorage.setItem('users', JSON.stringify(filteredUsers));\r\n  }\r\n};\r\n\r\n// Initialize the storage\r\ninitializeLocalStorage();\r\n\r\nconst services = {\r\n  authService,\r\n  callService,\r\n  clientService,\r\n  categoryService,\r\n  userService\r\n};\r\n\r\nexport default services; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}