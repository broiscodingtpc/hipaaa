{"ast":null,"code":"import { collection, addDoc, getDocs, doc, deleteDoc, query, where, orderBy, serverTimestamp } from 'firebase/firestore';\nimport { db } from '../firebase/config';\n\n// Colecții\nconst COLLECTIONS = {\n  CALLS: 'calls',\n  USERS: 'users',\n  CLIENTS: 'clients',\n  CATEGORIES: 'categories'\n};\n\n// Funcții pentru apeluri\nexport const callService = {\n  // Adaugă un apel nou\n  async addCall(callData) {\n    try {\n      const docRef = await addDoc(collection(db, COLLECTIONS.CALLS), {\n        ...callData,\n        createdAt: serverTimestamp()\n      });\n      return {\n        id: docRef.id,\n        ...callData\n      };\n    } catch (error) {\n      console.error('Error adding call:', error);\n      throw error;\n    }\n  },\n  // Obține toate apelurile\n  async getCalls(filters = {}) {\n    try {\n      let q = collection(db, COLLECTIONS.CALLS);\n\n      // Aplică filtre dacă există\n      if (filters.clientId) {\n        q = query(q, where('clientId', '==', filters.clientId));\n      }\n      if (filters.category) {\n        q = query(q, where('categories', 'array-contains', filters.category));\n      }\n      if (filters.dateFrom) {\n        q = query(q, where('timestamp', '>=', filters.dateFrom));\n      }\n      if (filters.dateTo) {\n        q = query(q, where('timestamp', '<=', filters.dateTo));\n      }\n\n      // Ordonează după timestamp\n      q = query(q, orderBy('timestamp', 'desc'));\n      const querySnapshot = await getDocs(q);\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error getting calls:', error);\n      throw error;\n    }\n  }\n};\n\n// Funcții pentru utilizatori\nexport const userService = {\n  // Adaugă un utilizator nou\n  async addUser(userData) {\n    try {\n      const docRef = await addDoc(collection(db, COLLECTIONS.USERS), {\n        ...userData,\n        createdAt: serverTimestamp()\n      });\n      return {\n        id: docRef.id,\n        ...userData\n      };\n    } catch (error) {\n      console.error('Error adding user:', error);\n      throw error;\n    }\n  },\n  // Obține toți utilizatorii\n  async getUsers() {\n    try {\n      const querySnapshot = await getDocs(collection(db, COLLECTIONS.USERS));\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error getting users:', error);\n      throw error;\n    }\n  },\n  // Șterge un utilizator\n  async deleteUser(userId) {\n    try {\n      await deleteDoc(doc(db, COLLECTIONS.USERS, userId));\n      return userId;\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      throw error;\n    }\n  }\n};\n\n// Funcții pentru clienți\nexport const clientService = {\n  // Obține toți clienții\n  async getClients() {\n    try {\n      const querySnapshot = await getDocs(collection(db, COLLECTIONS.CLIENTS));\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error getting clients:', error);\n      throw error;\n    }\n  }\n};\n\n// Funcții pentru categorii\nexport const categoryService = {\n  // Obține toate categoriile\n  async getCategories() {\n    try {\n      const querySnapshot = await getDocs(collection(db, COLLECTIONS.CATEGORIES));\n      return querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n    } catch (error) {\n      console.error('Error getting categories:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["collection","addDoc","getDocs","doc","deleteDoc","query","where","orderBy","serverTimestamp","db","COLLECTIONS","CALLS","USERS","CLIENTS","CATEGORIES","callService","addCall","callData","docRef","createdAt","id","error","console","getCalls","filters","q","clientId","category","dateFrom","dateTo","querySnapshot","docs","map","data","userService","addUser","userData","getUsers","deleteUser","userId","clientService","getClients","categoryService","getCategories"],"sources":["C:/Users/Robert/Desktop/hippaa app/src/services/database.js"],"sourcesContent":["import { \r\n  collection, \r\n  addDoc, \r\n  getDocs, \r\n  doc, \r\n  deleteDoc,\r\n  query,\r\n  where,\r\n  orderBy,\r\n  serverTimestamp \r\n} from 'firebase/firestore';\r\nimport { db } from '../firebase/config';\r\n\r\n// Colecții\r\nconst COLLECTIONS = {\r\n  CALLS: 'calls',\r\n  USERS: 'users',\r\n  CLIENTS: 'clients',\r\n  CATEGORIES: 'categories'\r\n};\r\n\r\n// Funcții pentru apeluri\r\nexport const callService = {\r\n  // Adaugă un apel nou\r\n  async addCall(callData) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, COLLECTIONS.CALLS), {\r\n        ...callData,\r\n        createdAt: serverTimestamp()\r\n      });\r\n      return { id: docRef.id, ...callData };\r\n    } catch (error) {\r\n      console.error('Error adding call:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obține toate apelurile\r\n  async getCalls(filters = {}) {\r\n    try {\r\n      let q = collection(db, COLLECTIONS.CALLS);\r\n      \r\n      // Aplică filtre dacă există\r\n      if (filters.clientId) {\r\n        q = query(q, where('clientId', '==', filters.clientId));\r\n      }\r\n      if (filters.category) {\r\n        q = query(q, where('categories', 'array-contains', filters.category));\r\n      }\r\n      if (filters.dateFrom) {\r\n        q = query(q, where('timestamp', '>=', filters.dateFrom));\r\n      }\r\n      if (filters.dateTo) {\r\n        q = query(q, where('timestamp', '<=', filters.dateTo));\r\n      }\r\n\r\n      // Ordonează după timestamp\r\n      q = query(q, orderBy('timestamp', 'desc'));\r\n\r\n      const querySnapshot = await getDocs(q);\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting calls:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Funcții pentru utilizatori\r\nexport const userService = {\r\n  // Adaugă un utilizator nou\r\n  async addUser(userData) {\r\n    try {\r\n      const docRef = await addDoc(collection(db, COLLECTIONS.USERS), {\r\n        ...userData,\r\n        createdAt: serverTimestamp()\r\n      });\r\n      return { id: docRef.id, ...userData };\r\n    } catch (error) {\r\n      console.error('Error adding user:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Obține toți utilizatorii\r\n  async getUsers() {\r\n    try {\r\n      const querySnapshot = await getDocs(collection(db, COLLECTIONS.USERS));\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting users:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Șterge un utilizator\r\n  async deleteUser(userId) {\r\n    try {\r\n      await deleteDoc(doc(db, COLLECTIONS.USERS, userId));\r\n      return userId;\r\n    } catch (error) {\r\n      console.error('Error deleting user:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Funcții pentru clienți\r\nexport const clientService = {\r\n  // Obține toți clienții\r\n  async getClients() {\r\n    try {\r\n      const querySnapshot = await getDocs(collection(db, COLLECTIONS.CLIENTS));\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting clients:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Funcții pentru categorii\r\nexport const categoryService = {\r\n  // Obține toate categoriile\r\n  async getCategories() {\r\n    try {\r\n      const querySnapshot = await getDocs(collection(db, COLLECTIONS.CATEGORIES));\r\n      return querySnapshot.docs.map(doc => ({\r\n        id: doc.id,\r\n        ...doc.data()\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error getting categories:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,SACEA,UAAU,EACVC,MAAM,EACNC,OAAO,EACPC,GAAG,EACHC,SAAS,EACTC,KAAK,EACLC,KAAK,EACLC,OAAO,EACPC,eAAe,QACV,oBAAoB;AAC3B,SAASC,EAAE,QAAQ,oBAAoB;;AAEvC;AACA,MAAMC,WAAW,GAAG;EAClBC,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,SAAS;EAClBC,UAAU,EAAE;AACd,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAG;EACzB;EACA,MAAMC,OAAOA,CAACC,QAAQ,EAAE;IACtB,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMjB,MAAM,CAACD,UAAU,CAACS,EAAE,EAAEC,WAAW,CAACC,KAAK,CAAC,EAAE;QAC7D,GAAGM,QAAQ;QACXE,SAAS,EAAEX,eAAe,CAAC;MAC7B,CAAC,CAAC;MACF,OAAO;QAAEY,EAAE,EAAEF,MAAM,CAACE,EAAE;QAAE,GAAGH;MAAS,CAAC;IACvC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAME,QAAQA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3B,IAAI;MACF,IAAIC,CAAC,GAAGzB,UAAU,CAACS,EAAE,EAAEC,WAAW,CAACC,KAAK,CAAC;;MAEzC;MACA,IAAIa,OAAO,CAACE,QAAQ,EAAE;QACpBD,CAAC,GAAGpB,KAAK,CAACoB,CAAC,EAAEnB,KAAK,CAAC,UAAU,EAAE,IAAI,EAAEkB,OAAO,CAACE,QAAQ,CAAC,CAAC;MACzD;MACA,IAAIF,OAAO,CAACG,QAAQ,EAAE;QACpBF,CAAC,GAAGpB,KAAK,CAACoB,CAAC,EAAEnB,KAAK,CAAC,YAAY,EAAE,gBAAgB,EAAEkB,OAAO,CAACG,QAAQ,CAAC,CAAC;MACvE;MACA,IAAIH,OAAO,CAACI,QAAQ,EAAE;QACpBH,CAAC,GAAGpB,KAAK,CAACoB,CAAC,EAAEnB,KAAK,CAAC,WAAW,EAAE,IAAI,EAAEkB,OAAO,CAACI,QAAQ,CAAC,CAAC;MAC1D;MACA,IAAIJ,OAAO,CAACK,MAAM,EAAE;QAClBJ,CAAC,GAAGpB,KAAK,CAACoB,CAAC,EAAEnB,KAAK,CAAC,WAAW,EAAE,IAAI,EAAEkB,OAAO,CAACK,MAAM,CAAC,CAAC;MACxD;;MAEA;MACAJ,CAAC,GAAGpB,KAAK,CAACoB,CAAC,EAAElB,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;MAE1C,MAAMuB,aAAa,GAAG,MAAM5B,OAAO,CAACuB,CAAC,CAAC;MACtC,OAAOK,aAAa,CAACC,IAAI,CAACC,GAAG,CAAC7B,GAAG,KAAK;QACpCiB,EAAE,EAAEjB,GAAG,CAACiB,EAAE;QACV,GAAGjB,GAAG,CAAC8B,IAAI,CAAC;MACd,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMa,WAAW,GAAG;EACzB;EACA,MAAMC,OAAOA,CAACC,QAAQ,EAAE;IACtB,IAAI;MACF,MAAMlB,MAAM,GAAG,MAAMjB,MAAM,CAACD,UAAU,CAACS,EAAE,EAAEC,WAAW,CAACE,KAAK,CAAC,EAAE;QAC7D,GAAGwB,QAAQ;QACXjB,SAAS,EAAEX,eAAe,CAAC;MAC7B,CAAC,CAAC;MACF,OAAO;QAAEY,EAAE,EAAEF,MAAM,CAACE,EAAE;QAAE,GAAGgB;MAAS,CAAC;IACvC,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMgB,QAAQA,CAAA,EAAG;IACf,IAAI;MACF,MAAMP,aAAa,GAAG,MAAM5B,OAAO,CAACF,UAAU,CAACS,EAAE,EAAEC,WAAW,CAACE,KAAK,CAAC,CAAC;MACtE,OAAOkB,aAAa,CAACC,IAAI,CAACC,GAAG,CAAC7B,GAAG,KAAK;QACpCiB,EAAE,EAAEjB,GAAG,CAACiB,EAAE;QACV,GAAGjB,GAAG,CAAC8B,IAAI,CAAC;MACd,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMiB,UAAUA,CAACC,MAAM,EAAE;IACvB,IAAI;MACF,MAAMnC,SAAS,CAACD,GAAG,CAACM,EAAE,EAAEC,WAAW,CAACE,KAAK,EAAE2B,MAAM,CAAC,CAAC;MACnD,OAAOA,MAAM;IACf,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMmB,aAAa,GAAG;EAC3B;EACA,MAAMC,UAAUA,CAAA,EAAG;IACjB,IAAI;MACF,MAAMX,aAAa,GAAG,MAAM5B,OAAO,CAACF,UAAU,CAACS,EAAE,EAAEC,WAAW,CAACG,OAAO,CAAC,CAAC;MACxE,OAAOiB,aAAa,CAACC,IAAI,CAACC,GAAG,CAAC7B,GAAG,KAAK;QACpCiB,EAAE,EAAEjB,GAAG,CAACiB,EAAE;QACV,GAAGjB,GAAG,CAAC8B,IAAI,CAAC;MACd,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMqB,eAAe,GAAG;EAC7B;EACA,MAAMC,aAAaA,CAAA,EAAG;IACpB,IAAI;MACF,MAAMb,aAAa,GAAG,MAAM5B,OAAO,CAACF,UAAU,CAACS,EAAE,EAAEC,WAAW,CAACI,UAAU,CAAC,CAAC;MAC3E,OAAOgB,aAAa,CAACC,IAAI,CAACC,GAAG,CAAC7B,GAAG,KAAK;QACpCiB,EAAE,EAAEjB,GAAG,CAACiB,EAAE;QACV,GAAGjB,GAAG,CAAC8B,IAAI,CAAC;MACd,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}