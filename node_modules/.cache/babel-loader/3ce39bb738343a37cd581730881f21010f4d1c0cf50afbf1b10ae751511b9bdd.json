{"ast":null,"code":"// Mock data for initial setup\nconst initialData = {\n  users: [{\n    id: '1',\n    email: 'admin@example.com',\n    password: 'password123',\n    // In a real app, this would be hashed\n    name: 'Admin User',\n    role: 'admin',\n    assignedClients: ['1', '2', '3']\n  }, {\n    id: '2',\n    email: 'agent@example.com',\n    password: 'password123',\n    name: 'Call Center Agent',\n    role: 'agent',\n    assignedClients: ['1', '2']\n  }, {\n    id: '3',\n    email: 'nurse@example.com',\n    password: 'password123',\n    name: 'Nurse User',\n    role: 'nurse',\n    assignedClients: ['1', '2', '3']\n  }, {\n    id: '4',\n    email: 'client@example.com',\n    password: 'password123',\n    name: 'Client User',\n    role: 'client',\n    assignedClients: ['1']\n  }],\n  clients: [{\n    id: '1',\n    name: 'Hospice Care A',\n    timezone: 'America/New_York',\n    active: true\n  }, {\n    id: '2',\n    name: 'Hospice Care B',\n    timezone: 'America/Chicago',\n    active: true\n  }, {\n    id: '3',\n    name: 'Hospice Care C',\n    timezone: 'America/Los_Angeles',\n    active: true\n  }],\n  calls: [{\n    id: '1',\n    clientId: '1',\n    userId: '2',\n    patientId: 'PT001',\n    callType: 'inbound',\n    summary: 'Patient reported severe pain',\n    categories: ['Pain'],\n    timestamp: new Date().toISOString()\n  }, {\n    id: '2',\n    clientId: '2',\n    userId: '2',\n    patientId: 'PT002',\n    callType: 'outbound',\n    summary: 'Follow-up on medication refill',\n    categories: ['Refill'],\n    timestamp: new Date().toISOString()\n  }],\n  categories: [{\n    id: '1',\n    label: 'Pain'\n  }, {\n    id: '2',\n    label: 'Refill'\n  }, {\n    id: '3',\n    label: 'Constipation'\n  }, {\n    id: '4',\n    label: 'Anxiety'\n  }]\n};\n\n// Initialize localStorage with empty arrays if not exists\nif (!localStorage.getItem('users')) {\n  localStorage.setItem('users', JSON.stringify([]));\n}\nif (!localStorage.getItem('clients')) {\n  localStorage.setItem('clients', JSON.stringify([]));\n}\nif (!localStorage.getItem('calls')) {\n  localStorage.setItem('calls', JSON.stringify([]));\n}\nif (!localStorage.getItem('categories')) {\n  localStorage.setItem('categories', JSON.stringify([]));\n}\n\n// Auth service\nexport const authService = {\n  login: (email, password) => {\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    const user = users.find(u => u.email === email && u.password === password);\n    if (!user) {\n      throw new Error('Invalid email or password');\n    }\n    const {\n      password: _,\n      ...userWithoutPassword\n    } = user;\n    localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n    return userWithoutPassword;\n  },\n  logout: () => {\n    localStorage.removeItem('currentUser');\n  },\n  getCurrentUser: () => {\n    return JSON.parse(localStorage.getItem('currentUser'));\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('currentUser');\n  }\n};\n\n// User service\nexport const userService = {\n  getUsers: () => {\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    return users;\n  },\n  getUser: id => {\n    const users = userService.getUsers();\n    return users.find(user => user.id === id);\n  },\n  addUser: userData => {\n    const users = userService.getUsers();\n    const newUser = {\n      ...userData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    users.push(newUser);\n    localStorage.setItem('users', JSON.stringify(users));\n    return newUser;\n  },\n  updateUser: (id, updatedData) => {\n    const users = userService.getUsers();\n    const index = users.findIndex(user => user.id === id);\n    if (index === -1) {\n      throw new Error('User not found');\n    }\n    users[index] = {\n      ...users[index],\n      ...updatedData\n    };\n    localStorage.setItem('users', JSON.stringify(users));\n    return users[index];\n  },\n  deleteUser: id => {\n    const users = userService.getUsers();\n    const filteredUsers = users.filter(user => user.id !== id);\n    localStorage.setItem('users', JSON.stringify(filteredUsers));\n  }\n};\n\n// Client service\nexport const clientService = {\n  getClients: () => {\n    return JSON.parse(localStorage.getItem('clients') || '[]');\n  },\n  addClient: clientData => {\n    const clients = clientService.getClients();\n    const newClient = {\n      ...clientData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    clients.push(newClient);\n    localStorage.setItem('clients', JSON.stringify(clients));\n    return newClient;\n  },\n  updateClient: (id, updatedData) => {\n    const clients = clientService.getClients();\n    const index = clients.findIndex(client => client.id === id);\n    if (index === -1) {\n      throw new Error('Client not found');\n    }\n    clients[index] = {\n      ...clients[index],\n      ...updatedData\n    };\n    localStorage.setItem('clients', JSON.stringify(clients));\n    return clients[index];\n  },\n  deleteClient: id => {\n    const clients = clientService.getClients();\n    const filteredClients = clients.filter(client => client.id !== id);\n    localStorage.setItem('clients', JSON.stringify(filteredClients));\n  }\n};\n\n// Call service\nexport const callService = {\n  getCalls: () => {\n    return JSON.parse(localStorage.getItem('calls') || '[]');\n  },\n  addCall: callData => {\n    const calls = callService.getCalls();\n    const newCall = {\n      ...callData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    calls.push(newCall);\n    localStorage.setItem('calls', JSON.stringify(calls));\n    return newCall;\n  },\n  updateCall: (id, updatedData) => {\n    const calls = callService.getCalls();\n    const index = calls.findIndex(call => call.id === id);\n    if (index === -1) {\n      throw new Error('Call not found');\n    }\n    calls[index] = {\n      ...calls[index],\n      ...updatedData\n    };\n    localStorage.setItem('calls', JSON.stringify(calls));\n    return calls[index];\n  },\n  deleteCall: id => {\n    const calls = callService.getCalls();\n    const filteredCalls = calls.filter(call => call.id !== id);\n    localStorage.setItem('calls', JSON.stringify(filteredCalls));\n  }\n};\n\n// Category service\nexport const categoryService = {\n  getCategories: () => {\n    return JSON.parse(localStorage.getItem('categories') || '[]');\n  },\n  addCategory: categoryData => {\n    const categories = categoryService.getCategories();\n    const newCategory = {\n      ...categoryData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    categories.push(newCategory);\n    localStorage.setItem('categories', JSON.stringify(categories));\n    return newCategory;\n  },\n  updateCategory: (id, updatedData) => {\n    const categories = categoryService.getCategories();\n    const index = categories.findIndex(category => category.id === id);\n    if (index === -1) {\n      throw new Error('Category not found');\n    }\n    categories[index] = {\n      ...categories[index],\n      ...updatedData\n    };\n    localStorage.setItem('categories', JSON.stringify(categories));\n    return categories[index];\n  },\n  deleteCategory: id => {\n    const categories = categoryService.getCategories();\n    const filteredCategories = categories.filter(category => category.id !== id);\n    localStorage.setItem('categories', JSON.stringify(filteredCategories));\n  }\n};\n\n// Initialize default users if no users exist\nconst initializeDefaultUsers = () => {\n  const users = JSON.parse(localStorage.getItem('users') || '[]');\n  if (users.length === 0) {\n    // Admin user\n    userService.addUser({\n      name: 'Admin User',\n      email: 'admin@example.com',\n      password: 'test123',\n      role: 'admin',\n      assignedClients: []\n    });\n\n    // Nurse user\n    userService.addUser({\n      name: 'Nurse User',\n      email: 'nurse@example.com',\n      password: 'test123',\n      role: 'nurse',\n      assignedClients: []\n    });\n\n    // Client user\n    userService.addUser({\n      name: 'Client User',\n      email: 'client@example.com',\n      password: 'test123',\n      role: 'client',\n      assignedClients: []\n    });\n\n    // Add some default clients\n    const client1 = clientService.addClient({\n      name: 'Hospice Care A',\n      timezone: 'America/New_York',\n      active: true\n    });\n    const client2 = clientService.addClient({\n      name: 'Hospice Care B',\n      timezone: 'America/Chicago',\n      active: true\n    });\n\n    // Assign clients to users\n    const nurseUser = users.find(u => u.email === 'nurse@example.com');\n    const clientUser = users.find(u => u.email === 'client@example.com');\n    if (nurseUser) {\n      userService.updateUser(nurseUser.id, {\n        ...nurseUser,\n        assignedClients: [client1.id, client2.id]\n      });\n    }\n    if (clientUser) {\n      userService.updateUser(clientUser.id, {\n        ...clientUser,\n        assignedClients: [client1.id]\n      });\n    }\n\n    // Add some default categories\n    categoryService.addCategory({\n      label: 'Pain'\n    });\n    categoryService.addCategory({\n      label: 'Refill'\n    });\n    categoryService.addCategory({\n      label: 'Constipation'\n    });\n    categoryService.addCategory({\n      label: 'Anxiety'\n    });\n    categoryService.addCategory({\n      label: 'Equipment'\n    });\n  }\n};\n\n// Call initialization\ninitializeDefaultUsers();","map":{"version":3,"names":["initialData","users","id","email","password","name","role","assignedClients","clients","timezone","active","calls","clientId","userId","patientId","callType","summary","categories","timestamp","Date","toISOString","label","localStorage","getItem","setItem","JSON","stringify","authService","login","parse","user","find","u","Error","_","userWithoutPassword","logout","removeItem","getCurrentUser","isAuthenticated","userService","getUsers","getUser","addUser","userData","newUser","now","toString","createdAt","push","updateUser","updatedData","index","findIndex","deleteUser","filteredUsers","filter","clientService","getClients","addClient","clientData","newClient","updateClient","client","deleteClient","filteredClients","callService","getCalls","addCall","callData","newCall","updateCall","call","deleteCall","filteredCalls","categoryService","getCategories","addCategory","categoryData","newCategory","updateCategory","category","deleteCategory","filteredCategories","initializeDefaultUsers","length","client1","client2","nurseUser","clientUser"],"sources":["C:/Users/Robert/Desktop/hippaa app/src/services/localStorage.js"],"sourcesContent":["// Mock data for initial setup\r\nconst initialData = {\r\n  users: [\r\n    {\r\n      id: '1',\r\n      email: 'admin@example.com',\r\n      password: 'password123', // In a real app, this would be hashed\r\n      name: 'Admin User',\r\n      role: 'admin',\r\n      assignedClients: ['1', '2', '3']\r\n    },\r\n    {\r\n      id: '2',\r\n      email: 'agent@example.com',\r\n      password: 'password123',\r\n      name: 'Call Center Agent',\r\n      role: 'agent',\r\n      assignedClients: ['1', '2']\r\n    },\r\n    {\r\n      id: '3',\r\n      email: 'nurse@example.com',\r\n      password: 'password123',\r\n      name: 'Nurse User',\r\n      role: 'nurse',\r\n      assignedClients: ['1', '2', '3']\r\n    },\r\n    {\r\n      id: '4',\r\n      email: 'client@example.com',\r\n      password: 'password123',\r\n      name: 'Client User',\r\n      role: 'client',\r\n      assignedClients: ['1']\r\n    }\r\n  ],\r\n  clients: [\r\n    {\r\n      id: '1',\r\n      name: 'Hospice Care A',\r\n      timezone: 'America/New_York',\r\n      active: true\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Hospice Care B',\r\n      timezone: 'America/Chicago',\r\n      active: true\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Hospice Care C',\r\n      timezone: 'America/Los_Angeles',\r\n      active: true\r\n    }\r\n  ],\r\n  calls: [\r\n    {\r\n      id: '1',\r\n      clientId: '1',\r\n      userId: '2',\r\n      patientId: 'PT001',\r\n      callType: 'inbound',\r\n      summary: 'Patient reported severe pain',\r\n      categories: ['Pain'],\r\n      timestamp: new Date().toISOString()\r\n    },\r\n    {\r\n      id: '2',\r\n      clientId: '2',\r\n      userId: '2',\r\n      patientId: 'PT002',\r\n      callType: 'outbound',\r\n      summary: 'Follow-up on medication refill',\r\n      categories: ['Refill'],\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  ],\r\n  categories: [\r\n    { id: '1', label: 'Pain' },\r\n    { id: '2', label: 'Refill' },\r\n    { id: '3', label: 'Constipation' },\r\n    { id: '4', label: 'Anxiety' }\r\n  ]\r\n};\r\n\r\n// Initialize localStorage with empty arrays if not exists\r\nif (!localStorage.getItem('users')) {\r\n  localStorage.setItem('users', JSON.stringify([]));\r\n}\r\nif (!localStorage.getItem('clients')) {\r\n  localStorage.setItem('clients', JSON.stringify([]));\r\n}\r\nif (!localStorage.getItem('calls')) {\r\n  localStorage.setItem('calls', JSON.stringify([]));\r\n}\r\nif (!localStorage.getItem('categories')) {\r\n  localStorage.setItem('categories', JSON.stringify([]));\r\n}\r\n\r\n// Auth service\r\nexport const authService = {\r\n  login: (email, password) => {\r\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n    const user = users.find(u => u.email === email && u.password === password);\r\n    \r\n    if (!user) {\r\n      throw new Error('Invalid email or password');\r\n    }\r\n\r\n    const { password: _, ...userWithoutPassword } = user;\r\n    localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n    return userWithoutPassword;\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('currentUser');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    return JSON.parse(localStorage.getItem('currentUser'));\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('currentUser');\r\n  }\r\n};\r\n\r\n// User service\r\nexport const userService = {\r\n  getUsers: () => {\r\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n    return users;\r\n  },\r\n  getUser: (id) => {\r\n    const users = userService.getUsers();\r\n    return users.find(user => user.id === id);\r\n  },\r\n  addUser: (userData) => {\r\n    const users = userService.getUsers();\r\n    const newUser = {\r\n      ...userData,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    users.push(newUser);\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n    return newUser;\r\n  },\r\n  updateUser: (id, updatedData) => {\r\n    const users = userService.getUsers();\r\n    const index = users.findIndex(user => user.id === id);\r\n    if (index === -1) {\r\n      throw new Error('User not found');\r\n    }\r\n    users[index] = { ...users[index], ...updatedData };\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n    return users[index];\r\n  },\r\n  deleteUser: (id) => {\r\n    const users = userService.getUsers();\r\n    const filteredUsers = users.filter(user => user.id !== id);\r\n    localStorage.setItem('users', JSON.stringify(filteredUsers));\r\n  }\r\n};\r\n\r\n// Client service\r\nexport const clientService = {\r\n  getClients: () => {\r\n    return JSON.parse(localStorage.getItem('clients') || '[]');\r\n  },\r\n  addClient: (clientData) => {\r\n    const clients = clientService.getClients();\r\n    const newClient = {\r\n      ...clientData,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    clients.push(newClient);\r\n    localStorage.setItem('clients', JSON.stringify(clients));\r\n    return newClient;\r\n  },\r\n  updateClient: (id, updatedData) => {\r\n    const clients = clientService.getClients();\r\n    const index = clients.findIndex(client => client.id === id);\r\n    if (index === -1) {\r\n      throw new Error('Client not found');\r\n    }\r\n    clients[index] = { ...clients[index], ...updatedData };\r\n    localStorage.setItem('clients', JSON.stringify(clients));\r\n    return clients[index];\r\n  },\r\n  deleteClient: (id) => {\r\n    const clients = clientService.getClients();\r\n    const filteredClients = clients.filter(client => client.id !== id);\r\n    localStorage.setItem('clients', JSON.stringify(filteredClients));\r\n  }\r\n};\r\n\r\n// Call service\r\nexport const callService = {\r\n  getCalls: () => {\r\n    return JSON.parse(localStorage.getItem('calls') || '[]');\r\n  },\r\n  addCall: (callData) => {\r\n    const calls = callService.getCalls();\r\n    const newCall = {\r\n      ...callData,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    calls.push(newCall);\r\n    localStorage.setItem('calls', JSON.stringify(calls));\r\n    return newCall;\r\n  },\r\n  updateCall: (id, updatedData) => {\r\n    const calls = callService.getCalls();\r\n    const index = calls.findIndex(call => call.id === id);\r\n    if (index === -1) {\r\n      throw new Error('Call not found');\r\n    }\r\n    calls[index] = { ...calls[index], ...updatedData };\r\n    localStorage.setItem('calls', JSON.stringify(calls));\r\n    return calls[index];\r\n  },\r\n  deleteCall: (id) => {\r\n    const calls = callService.getCalls();\r\n    const filteredCalls = calls.filter(call => call.id !== id);\r\n    localStorage.setItem('calls', JSON.stringify(filteredCalls));\r\n  }\r\n};\r\n\r\n// Category service\r\nexport const categoryService = {\r\n  getCategories: () => {\r\n    return JSON.parse(localStorage.getItem('categories') || '[]');\r\n  },\r\n  addCategory: (categoryData) => {\r\n    const categories = categoryService.getCategories();\r\n    const newCategory = {\r\n      ...categoryData,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    categories.push(newCategory);\r\n    localStorage.setItem('categories', JSON.stringify(categories));\r\n    return newCategory;\r\n  },\r\n  updateCategory: (id, updatedData) => {\r\n    const categories = categoryService.getCategories();\r\n    const index = categories.findIndex(category => category.id === id);\r\n    if (index === -1) {\r\n      throw new Error('Category not found');\r\n    }\r\n    categories[index] = { ...categories[index], ...updatedData };\r\n    localStorage.setItem('categories', JSON.stringify(categories));\r\n    return categories[index];\r\n  },\r\n  deleteCategory: (id) => {\r\n    const categories = categoryService.getCategories();\r\n    const filteredCategories = categories.filter(category => category.id !== id);\r\n    localStorage.setItem('categories', JSON.stringify(filteredCategories));\r\n  }\r\n};\r\n\r\n// Initialize default users if no users exist\r\nconst initializeDefaultUsers = () => {\r\n  const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n  if (users.length === 0) {\r\n    // Admin user\r\n    userService.addUser({\r\n      name: 'Admin User',\r\n      email: 'admin@example.com',\r\n      password: 'test123',\r\n      role: 'admin',\r\n      assignedClients: []\r\n    });\r\n\r\n    // Nurse user\r\n    userService.addUser({\r\n      name: 'Nurse User',\r\n      email: 'nurse@example.com',\r\n      password: 'test123',\r\n      role: 'nurse',\r\n      assignedClients: []\r\n    });\r\n\r\n    // Client user\r\n    userService.addUser({\r\n      name: 'Client User',\r\n      email: 'client@example.com',\r\n      password: 'test123',\r\n      role: 'client',\r\n      assignedClients: []\r\n    });\r\n\r\n    // Add some default clients\r\n    const client1 = clientService.addClient({\r\n      name: 'Hospice Care A',\r\n      timezone: 'America/New_York',\r\n      active: true\r\n    });\r\n\r\n    const client2 = clientService.addClient({\r\n      name: 'Hospice Care B',\r\n      timezone: 'America/Chicago',\r\n      active: true\r\n    });\r\n\r\n    // Assign clients to users\r\n    const nurseUser = users.find(u => u.email === 'nurse@example.com');\r\n    const clientUser = users.find(u => u.email === 'client@example.com');\r\n\r\n    if (nurseUser) {\r\n      userService.updateUser(nurseUser.id, {\r\n        ...nurseUser,\r\n        assignedClients: [client1.id, client2.id]\r\n      });\r\n    }\r\n\r\n    if (clientUser) {\r\n      userService.updateUser(clientUser.id, {\r\n        ...clientUser,\r\n        assignedClients: [client1.id]\r\n      });\r\n    }\r\n\r\n    // Add some default categories\r\n    categoryService.addCategory({ label: 'Pain' });\r\n    categoryService.addCategory({ label: 'Refill' });\r\n    categoryService.addCategory({ label: 'Constipation' });\r\n    categoryService.addCategory({ label: 'Anxiety' });\r\n    categoryService.addCategory({ label: 'Equipment' });\r\n  }\r\n};\r\n\r\n// Call initialization\r\ninitializeDefaultUsers(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}