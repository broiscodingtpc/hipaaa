{"ast":null,"code":"// Mock data for initial setup\nconst initialData = {\n  users: [{\n    id: '1',\n    email: 'admin@example.com',\n    password: 'password123',\n    // In a real app, this would be hashed\n    name: 'Admin User',\n    role: 'admin',\n    assignedClients: ['1', '2', '3']\n  }, {\n    id: '2',\n    email: 'agent@example.com',\n    password: 'password123',\n    name: 'Call Center Agent',\n    role: 'agent',\n    assignedClients: ['1', '2']\n  }, {\n    id: '3',\n    email: 'nurse@example.com',\n    password: 'password123',\n    name: 'Nurse User',\n    role: 'nurse',\n    assignedClients: ['1', '2', '3']\n  }, {\n    id: '4',\n    email: 'client@example.com',\n    password: 'password123',\n    name: 'Client User',\n    role: 'client',\n    assignedClients: ['1']\n  }],\n  clients: [{\n    id: '1',\n    name: 'Hospice Care A',\n    timezone: 'America/New_York',\n    active: true\n  }, {\n    id: '2',\n    name: 'Hospice Care B',\n    timezone: 'America/Chicago',\n    active: true\n  }, {\n    id: '3',\n    name: 'Hospice Care C',\n    timezone: 'America/Los_Angeles',\n    active: true\n  }],\n  calls: [{\n    id: '1',\n    clientId: '1',\n    userId: '2',\n    patientId: 'PT001',\n    callType: 'inbound',\n    summary: 'Patient reported severe pain',\n    categories: ['Pain'],\n    timestamp: new Date().toISOString()\n  }, {\n    id: '2',\n    clientId: '2',\n    userId: '2',\n    patientId: 'PT002',\n    callType: 'outbound',\n    summary: 'Follow-up on medication refill',\n    categories: ['Refill'],\n    timestamp: new Date().toISOString()\n  }],\n  categories: [{\n    id: '1',\n    label: 'Pain'\n  }, {\n    id: '2',\n    label: 'Refill'\n  }, {\n    id: '3',\n    label: 'Constipation'\n  }, {\n    id: '4',\n    label: 'Anxiety'\n  }]\n};\n\n// Initialize localStorage with mock data if empty\nconst initializeLocalStorage = () => {\n  if (!localStorage.getItem('users')) {\n    localStorage.setItem('users', JSON.stringify(initialData.users));\n  }\n  if (!localStorage.getItem('clients')) {\n    localStorage.setItem('clients', JSON.stringify(initialData.clients));\n  }\n  if (!localStorage.getItem('calls')) {\n    localStorage.setItem('calls', JSON.stringify(initialData.calls));\n  }\n  if (!localStorage.getItem('categories')) {\n    localStorage.setItem('categories', JSON.stringify(initialData.categories));\n  }\n};\n\n// Auth service\nconst authService = {\n  login: (email, password) => {\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    const user = users.find(u => u.email === email && u.password === password);\n    if (!user) {\n      throw new Error('Invalid email or password');\n    }\n    const {\n      password: _,\n      ...userWithoutPassword\n    } = user;\n    localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n    return userWithoutPassword;\n  },\n  logout: () => {\n    localStorage.removeItem('currentUser');\n  },\n  getCurrentUser: () => {\n    return JSON.parse(localStorage.getItem('currentUser'));\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('currentUser');\n  }\n};\n\n// Call service\nexport const callService = {\n  getCalls: () => {\n    return JSON.parse(localStorage.getItem('calls'));\n  },\n  addCall: call => {\n    const calls = JSON.parse(localStorage.getItem('calls'));\n    const newCall = {\n      ...call,\n      id: Date.now().toString(),\n      timestamp: new Date().toISOString()\n    };\n    calls.push(newCall);\n    localStorage.setItem('calls', JSON.stringify(calls));\n    return newCall;\n  }\n};\n\n// Client service\nexport const clientService = {\n  getClients: () => {\n    return JSON.parse(localStorage.getItem('clients'));\n  },\n  addClient: clientData => {\n    const clients = JSON.parse(localStorage.getItem('clients'));\n    const newClient = {\n      ...clientData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    clients.push(newClient);\n    localStorage.setItem('clients', JSON.stringify(clients));\n    return newClient;\n  }\n};\n\n// Category service\nexport const categoryService = {\n  getCategories: () => {\n    return JSON.parse(localStorage.getItem('categories'));\n  },\n  addCategory: categoryData => {\n    const categories = JSON.parse(localStorage.getItem('categories'));\n    const newCategory = {\n      ...categoryData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    categories.push(newCategory);\n    localStorage.setItem('categories', JSON.stringify(categories));\n    return newCategory;\n  }\n};\n\n// User service\nexport const userService = {\n  getUsers: () => {\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\n    return users;\n  },\n  getUser: id => {\n    const users = userService.getUsers();\n    return users.find(user => user.id === id);\n  },\n  addUser: userData => {\n    const users = userService.getUsers();\n    const newUser = {\n      ...userData,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    };\n    users.push(newUser);\n    localStorage.setItem('users', JSON.stringify(users));\n    return newUser;\n  },\n  updateUser: (id, updatedData) => {\n    const users = userService.getUsers();\n    const index = users.findIndex(user => user.id === id);\n    if (index === -1) {\n      throw new Error('User not found');\n    }\n    users[index] = {\n      ...users[index],\n      ...updatedData\n    };\n    localStorage.setItem('users', JSON.stringify(users));\n    return users[index];\n  },\n  deleteUser: id => {\n    const users = userService.getUsers();\n    const filteredUsers = users.filter(user => user.id !== id);\n    localStorage.setItem('users', JSON.stringify(filteredUsers));\n  }\n};\n\n// Initialize default users if no users exist\nconst initializeDefaultUsers = () => {\n  const users = JSON.parse(localStorage.getItem('users') || '[]');\n  if (users.length === 0) {\n    // Admin user\n    userService.addUser({\n      name: 'Admin User',\n      email: 'admin@example.com',\n      password: 'test123',\n      role: 'admin',\n      assignedClients: []\n    });\n\n    // Nurse user\n    userService.addUser({\n      name: 'Nurse User',\n      email: 'nurse@example.com',\n      password: 'test123',\n      role: 'nurse',\n      assignedClients: []\n    });\n\n    // Client user\n    userService.addUser({\n      name: 'Client User',\n      email: 'client@example.com',\n      password: 'test123',\n      role: 'client',\n      assignedClients: []\n    });\n\n    // Add some default clients\n    const client1 = clientService.addClient({\n      name: 'Hospice Care A',\n      timezone: 'America/New_York',\n      active: true\n    });\n    const client2 = clientService.addClient({\n      name: 'Hospice Care B',\n      timezone: 'America/Chicago',\n      active: true\n    });\n\n    // Assign clients to users\n    const nurseUser = users.find(u => u.email === 'nurse@example.com');\n    const clientUser = users.find(u => u.email === 'client@example.com');\n    if (nurseUser) {\n      userService.updateUser(nurseUser.id, {\n        ...nurseUser,\n        assignedClients: [client1.id, client2.id]\n      });\n    }\n    if (clientUser) {\n      userService.updateUser(clientUser.id, {\n        ...clientUser,\n        assignedClients: [client1.id]\n      });\n    }\n\n    // Add some default categories\n    categoryService.addCategory({\n      label: 'Pain'\n    });\n    categoryService.addCategory({\n      label: 'Refill'\n    });\n    categoryService.addCategory({\n      label: 'Constipation'\n    });\n    categoryService.addCategory({\n      label: 'Anxiety'\n    });\n    categoryService.addCategory({\n      label: 'Equipment'\n    });\n  }\n};\n\n// Call initialization\ninitializeDefaultUsers();\n\n// Initialize the storage\ninitializeLocalStorage();\nconst services = {\n  authService,\n  callService,\n  clientService,\n  categoryService,\n  userService\n};\nexport default services;","map":{"version":3,"names":["initialData","users","id","email","password","name","role","assignedClients","clients","timezone","active","calls","clientId","userId","patientId","callType","summary","categories","timestamp","Date","toISOString","label","initializeLocalStorage","localStorage","getItem","setItem","JSON","stringify","authService","login","parse","user","find","u","Error","_","userWithoutPassword","logout","removeItem","getCurrentUser","isAuthenticated","callService","getCalls","addCall","call","newCall","now","toString","push","clientService","getClients","addClient","clientData","newClient","createdAt","categoryService","getCategories","addCategory","categoryData","newCategory","userService","getUsers","getUser","addUser","userData","newUser","updateUser","updatedData","index","findIndex","deleteUser","filteredUsers","filter","initializeDefaultUsers","length","client1","client2","nurseUser","clientUser","services"],"sources":["C:/Users/Robert/Desktop/hippaa app/src/services/localStorage.js"],"sourcesContent":["// Mock data for initial setup\r\nconst initialData = {\r\n  users: [\r\n    {\r\n      id: '1',\r\n      email: 'admin@example.com',\r\n      password: 'password123', // In a real app, this would be hashed\r\n      name: 'Admin User',\r\n      role: 'admin',\r\n      assignedClients: ['1', '2', '3']\r\n    },\r\n    {\r\n      id: '2',\r\n      email: 'agent@example.com',\r\n      password: 'password123',\r\n      name: 'Call Center Agent',\r\n      role: 'agent',\r\n      assignedClients: ['1', '2']\r\n    },\r\n    {\r\n      id: '3',\r\n      email: 'nurse@example.com',\r\n      password: 'password123',\r\n      name: 'Nurse User',\r\n      role: 'nurse',\r\n      assignedClients: ['1', '2', '3']\r\n    },\r\n    {\r\n      id: '4',\r\n      email: 'client@example.com',\r\n      password: 'password123',\r\n      name: 'Client User',\r\n      role: 'client',\r\n      assignedClients: ['1']\r\n    }\r\n  ],\r\n  clients: [\r\n    {\r\n      id: '1',\r\n      name: 'Hospice Care A',\r\n      timezone: 'America/New_York',\r\n      active: true\r\n    },\r\n    {\r\n      id: '2',\r\n      name: 'Hospice Care B',\r\n      timezone: 'America/Chicago',\r\n      active: true\r\n    },\r\n    {\r\n      id: '3',\r\n      name: 'Hospice Care C',\r\n      timezone: 'America/Los_Angeles',\r\n      active: true\r\n    }\r\n  ],\r\n  calls: [\r\n    {\r\n      id: '1',\r\n      clientId: '1',\r\n      userId: '2',\r\n      patientId: 'PT001',\r\n      callType: 'inbound',\r\n      summary: 'Patient reported severe pain',\r\n      categories: ['Pain'],\r\n      timestamp: new Date().toISOString()\r\n    },\r\n    {\r\n      id: '2',\r\n      clientId: '2',\r\n      userId: '2',\r\n      patientId: 'PT002',\r\n      callType: 'outbound',\r\n      summary: 'Follow-up on medication refill',\r\n      categories: ['Refill'],\r\n      timestamp: new Date().toISOString()\r\n    }\r\n  ],\r\n  categories: [\r\n    { id: '1', label: 'Pain' },\r\n    { id: '2', label: 'Refill' },\r\n    { id: '3', label: 'Constipation' },\r\n    { id: '4', label: 'Anxiety' }\r\n  ]\r\n};\r\n\r\n// Initialize localStorage with mock data if empty\r\nconst initializeLocalStorage = () => {\r\n  if (!localStorage.getItem('users')) {\r\n    localStorage.setItem('users', JSON.stringify(initialData.users));\r\n  }\r\n  if (!localStorage.getItem('clients')) {\r\n    localStorage.setItem('clients', JSON.stringify(initialData.clients));\r\n  }\r\n  if (!localStorage.getItem('calls')) {\r\n    localStorage.setItem('calls', JSON.stringify(initialData.calls));\r\n  }\r\n  if (!localStorage.getItem('categories')) {\r\n    localStorage.setItem('categories', JSON.stringify(initialData.categories));\r\n  }\r\n};\r\n\r\n// Auth service\r\nconst authService = {\r\n  login: (email, password) => {\r\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n    const user = users.find(u => u.email === email && u.password === password);\r\n    \r\n    if (!user) {\r\n      throw new Error('Invalid email or password');\r\n    }\r\n\r\n    const { password: _, ...userWithoutPassword } = user;\r\n    localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n    return userWithoutPassword;\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('currentUser');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    return JSON.parse(localStorage.getItem('currentUser'));\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    return !!localStorage.getItem('currentUser');\r\n  }\r\n};\r\n\r\n// Call service\r\nexport const callService = {\r\n  getCalls: () => {\r\n    return JSON.parse(localStorage.getItem('calls'));\r\n  },\r\n\r\n  addCall: (call) => {\r\n    const calls = JSON.parse(localStorage.getItem('calls'));\r\n    const newCall = {\r\n      ...call,\r\n      id: Date.now().toString(),\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    calls.push(newCall);\r\n    localStorage.setItem('calls', JSON.stringify(calls));\r\n    return newCall;\r\n  }\r\n};\r\n\r\n// Client service\r\nexport const clientService = {\r\n  getClients: () => {\r\n    return JSON.parse(localStorage.getItem('clients'));\r\n  },\r\n\r\n  addClient: (clientData) => {\r\n    const clients = JSON.parse(localStorage.getItem('clients'));\r\n    const newClient = {\r\n      ...clientData,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    clients.push(newClient);\r\n    localStorage.setItem('clients', JSON.stringify(clients));\r\n    return newClient;\r\n  }\r\n};\r\n\r\n// Category service\r\nexport const categoryService = {\r\n  getCategories: () => {\r\n    return JSON.parse(localStorage.getItem('categories'));\r\n  },\r\n\r\n  addCategory: (categoryData) => {\r\n    const categories = JSON.parse(localStorage.getItem('categories'));\r\n    const newCategory = {\r\n      ...categoryData,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    categories.push(newCategory);\r\n    localStorage.setItem('categories', JSON.stringify(categories));\r\n    return newCategory;\r\n  }\r\n};\r\n\r\n// User service\r\nexport const userService = {\r\n  getUsers: () => {\r\n    const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n    return users;\r\n  },\r\n  getUser: (id) => {\r\n    const users = userService.getUsers();\r\n    return users.find(user => user.id === id);\r\n  },\r\n  addUser: (userData) => {\r\n    const users = userService.getUsers();\r\n    const newUser = {\r\n      ...userData,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    users.push(newUser);\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n    return newUser;\r\n  },\r\n  updateUser: (id, updatedData) => {\r\n    const users = userService.getUsers();\r\n    const index = users.findIndex(user => user.id === id);\r\n    if (index === -1) {\r\n      throw new Error('User not found');\r\n    }\r\n    users[index] = { ...users[index], ...updatedData };\r\n    localStorage.setItem('users', JSON.stringify(users));\r\n    return users[index];\r\n  },\r\n  deleteUser: (id) => {\r\n    const users = userService.getUsers();\r\n    const filteredUsers = users.filter(user => user.id !== id);\r\n    localStorage.setItem('users', JSON.stringify(filteredUsers));\r\n  }\r\n};\r\n\r\n// Initialize default users if no users exist\r\nconst initializeDefaultUsers = () => {\r\n  const users = JSON.parse(localStorage.getItem('users') || '[]');\r\n  if (users.length === 0) {\r\n    // Admin user\r\n    userService.addUser({\r\n      name: 'Admin User',\r\n      email: 'admin@example.com',\r\n      password: 'test123',\r\n      role: 'admin',\r\n      assignedClients: []\r\n    });\r\n\r\n    // Nurse user\r\n    userService.addUser({\r\n      name: 'Nurse User',\r\n      email: 'nurse@example.com',\r\n      password: 'test123',\r\n      role: 'nurse',\r\n      assignedClients: []\r\n    });\r\n\r\n    // Client user\r\n    userService.addUser({\r\n      name: 'Client User',\r\n      email: 'client@example.com',\r\n      password: 'test123',\r\n      role: 'client',\r\n      assignedClients: []\r\n    });\r\n\r\n    // Add some default clients\r\n    const client1 = clientService.addClient({\r\n      name: 'Hospice Care A',\r\n      timezone: 'America/New_York',\r\n      active: true\r\n    });\r\n\r\n    const client2 = clientService.addClient({\r\n      name: 'Hospice Care B',\r\n      timezone: 'America/Chicago',\r\n      active: true\r\n    });\r\n\r\n    // Assign clients to users\r\n    const nurseUser = users.find(u => u.email === 'nurse@example.com');\r\n    const clientUser = users.find(u => u.email === 'client@example.com');\r\n\r\n    if (nurseUser) {\r\n      userService.updateUser(nurseUser.id, {\r\n        ...nurseUser,\r\n        assignedClients: [client1.id, client2.id]\r\n      });\r\n    }\r\n\r\n    if (clientUser) {\r\n      userService.updateUser(clientUser.id, {\r\n        ...clientUser,\r\n        assignedClients: [client1.id]\r\n      });\r\n    }\r\n\r\n    // Add some default categories\r\n    categoryService.addCategory({ label: 'Pain' });\r\n    categoryService.addCategory({ label: 'Refill' });\r\n    categoryService.addCategory({ label: 'Constipation' });\r\n    categoryService.addCategory({ label: 'Anxiety' });\r\n    categoryService.addCategory({ label: 'Equipment' });\r\n  }\r\n};\r\n\r\n// Call initialization\r\ninitializeDefaultUsers();\r\n\r\n// Initialize the storage\r\ninitializeLocalStorage();\r\n\r\nconst services = {\r\n  authService,\r\n  callService,\r\n  clientService,\r\n  categoryService,\r\n  userService\r\n};\r\n\r\nexport default services; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}